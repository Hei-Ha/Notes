{"./":{"url":"./","title":"简介","keywords":"","body":"Notes jianjie "},"src/frontEnd/":{"url":"src/frontEnd/","title":"前端","keywords":"","body":"JS 知识点 "},"src/frontEnd/js/":{"url":"src/frontEnd/js/","title":"JS","keywords":"","body":""},"src/frontEnd/js/undefined和null的区别.html":{"url":"src/frontEnd/js/undefined和null的区别.html","title":"undefined 和 null 的区别","keywords":"","body":"历史原因 刚开始，javascript 中只有 null，表示无的值，并且可以转为数字 0 。 但是设计者发现这样不够，有两个原因： 1、null 像在 java 里面一样，被当作是一个对象，但是 javascript 中 数据类型分为基本数据类型，和引用数据类型。作者觉得表示 无 的值，最好不是对象。 2、javascript 刚开始的版本没有错误处理机制，发生数据类型不匹配的时候，往往是自动转换类型，或者直接失败，如果 null 自动转为 0 ，错误很不容易被发现。 所以，作者又加上了一个 undefined 如何区分 null是一个表示\"无\"的对象，转为数值时为0；undefined是一个表示\"无\"的原始值，转为数值时为NaN。 用法 null 表示\"没有对象\"，即该处不应该有值。典型用法是： （1） 作为函数的参数，表示该函数的参数不是对象。 （2） 作为对象原型链的终点。 undefined 表示\"缺少值\"，就是此处应该有一个值，但是还没有定义。典型用法是： （1）变量被声明了，但没有赋值时，就等于undefined。 （2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。 （3）对象没有赋值的属性，该属性的值为undefined。 （4）函数没有返回值时，默认返回undefined。 "},"src/frontEnd/js/原型和原型链.html":{"url":"src/frontEnd/js/原型和原型链.html","title":"原型和原型链","keywords":"","body":"原型链是什么？说一说原型链。 举个例子： 有一个对象 x = {}, 它有一个隐藏属性，叫 **???**, 这个隐藏属性，指向 Object.prototype，可以得出： x.__???__ === Object.prototype 也就是：x 的隐藏属性，等于 Object.prototype。在这里 x 的隐藏属性，就是 x 的原型，即： proto 这是原型的概念。 现在有另外一个 数组 Y = [], 它也有一个隐藏属性 proto****, 这个隐藏属性，指向 Array.prototype, 可以得出： Y.__proto__ === Array.prototype 也就是：Y 的原型，等于 Array.prototype 属性。 与此同时，Array 也有一个隐藏属性 proto，它等于 Object.prototype, 所以可以得出： Array.__proto__ === Object.prototype 所以，最终可以得出： Y.__proto__ => Array.__proto__ => Object.prototype 这就是原型链。 注：只有构造函数才有 prototype 属性。 js 中所有对象都有 **proto** 属性。 如何创建原型链。 直接修改对象的隐藏属性指向，比如： 声明一个函数 function F () {} Y = Object.create(F) Y.__proto__ === F.prototype 那么就会形成这样一个原型链： Y.__proto__ === F.prototype === Object.prototype 这样就创建了一个新的链条，新的原型链。 原型链解决了什么问题？ 在没有 Class 的情况下，实现了继承。 原型链缺点 与 class 相比，写起来比较复杂，并且不像 java 那样有私有属性。 在 父对象上声明 __ 开头这样的属性值，子对象也是能够访问的，只是默认约定不访问 __ 开头的属性。 "},"src/gitOperate/":{"url":"src/gitOperate/","title":"Git","keywords":"","body":"git 常用命令 合并commit 为一个 // 合并指定版本号（不包含此版本） git rebase -i [commitid] :%s/pick/s/g 全局替换 pick 为 s 拉取远程分支到本地 git checkout -b 本地新建的分支名 origin/远程分支名 "},"src/regEx/":{"url":"src/regEx/","title":"正则表达式","keywords":"","body":"数字每三位添加逗号 String(123456789).replace(/(? "}}